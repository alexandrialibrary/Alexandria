swagger: "2.0"
info:
  description: Alexandria is a simple little card catalogue webapp with a terribly pretentious name.
  title: Alexandria API
  version: "0.0.1-preview"
  contact:
    name: Alexandria API Team
    url: https://github.com/hawkw/Alexandria
basePath: /api
schemes:
- http

paths:
  /books:
    get:
      operationId: listBooks
      summary: Get a list of all books.
      description: ""
      produces:
        - application/json
      parameters:
        - name: offset
          description: The starting number of the books to retrieve
          in: query
          required: false
          type: integer
          format: int32
          default: 0
        - name: count
          description: The number of books to retrieve
          in: query
          required: false
          type: integer
          format: int32
          default: 10
      responses:
        200:
          description: List all books
          schema:
            title: Books
            type: array
            items:
              $ref: '#/definitions/Book'
    post:
      operationId: Create book
      summary: Create a new book.
      description: ""
      produces:
        - application/json
      parameters:
        - name: book
          in: body
          description: Add book to library
          required: true
          schema:
            title: Book
            items:
              $ref: '#/definitions/Book'
      responses:
        201:
          description: Book added
          schema:
            title: Book
            items:
              $ref: '#/definitions/Book'
  /book/{isbn}:
    get:
      operationId: getBookByISBN
      summary: Get a specific book by ISBN.
      description: Get a specific book by ISBN. If the user has book creation priviliges and the ISBN is unrecognized, the book definition is pulled from the Open Library API and stored in the database before returning a book object as normal (but with a different status). If the user doesn't have book creation privilieges and the ISBN is unrecognized, a 404 is returned.
      produces:
        - application/json
      parameters:
        - name: isbn
          in: path
          type: string
          required: true
      responses:
        200:
          description: Book returned
          schema:
            title: Book
            items:
              $ref: '#/definitions/Book'
        201:
          description: Book created
          schema:
            title: Book
            items:
              $ref: '#/definitions/Book'
        404:
          description: Book not found
        400:
          description: Invalid ISBN
          schema:
            $ref: '#/definitions/ErrorModel'
    delete:
      operationId: deleteBookByISBN
      summary: Delete a specific book by ISBN.
      description: ""
      produces:
        - application/json
      parameters:
        - name: isbn
          in: path
          type: string
      responses:
        204:
          description: Book deleted
        404:
          description: Matching book not found.
          schema:
            $ref: '#/definitions/ErrorModel'
        400:
          description: Invalid ISBN
          schema:
            $ref: '#/definitions/ErrorModel'
  /authors:
    get:
      operationId: listAuthors
      summary: Get all authors.
      description: Get all authors. Why would you want to do this? I really don't think you want this.
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: offset
          description: The starting number of the authors to retrieve
          in: query
          required: false
          type: integer
          format: int32
          default: 0
        - name: count
          description: The number of authors to retrieve
          in: query
          required: false
          type: integer
          format: int32
          default: 10
      responses:
        200:
          description: List all authors
          schema:
            title: Author
            type: array
            items:
              $ref: '#/definitions/Author'
    post:
      operationId: createAuthor
      summary: Create a new author.
      description: ""
      produces:
        - application/json
      parameters:
        - name: author
          in: body
          description: Add author to database
          required: true
          schema:
            title: Author
            items:
              $ref: '#/definitions/Author'
      responses:
        201:
          description: Author added
          schema:
            title: Author
            items:
              $ref: '#/definitions/Author'
  /author/{name}:
    get:
      operationId: getAuthorByName
      summary: Get a specific author by name.
      description: ""
      produces:
        - application/json
      parameters:
        - name: name
          description: The author's name
          in: path
          required: true
          type: string
      responses:
        200:
          description: Author returned
          schema:
            title: Author
            items:
              $ref: '#/definitions/Author'
        404:
          description: Author not found
    delete:
      operationId: deleteAuthorByName
      summary: Get a specific author by name.
      parameters:
        - name: name
          description: The author's name
          in: path
          required: true
          type: string
      responses:
        204:
          description: Author deleted
        404:
          description: Matching author not found.
  /loan:
    get:
      operationId: getUserLoans
      summary: Get a specific user's outstanding loans.
      description: ""
      produces:
        - application/json
      responses:
        200:
          description: Books returned
          schema:
            title: Book
            items:
              $ref: '#/definitions/Book'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
    post:
      operationId: createLoan
      summary: Create a new loan to the current user.
      description: ""
      produces:
        - application/json
      parameters:
        - name: isbn
          description: The ISBN of the book to checkout.
          in: body
          required: true
          schema:
            type: string
      responses:
        200:
          description: Book checked out (loan returned)
          schema:
            title: Loan
            items:
              $ref: '#/definitions/Loan'
        401:
          description: Unauthorized
          schema:
            $ref: '#/definitions/ErrorModel'
        409:
          description: Already checked-out
          schema:
            $ref: '#/definitions/ErrorModel'

definitions:
  Book:
    properties:
      isbn:
        type: string
      title:
        type: string
      subtitle:
        type: string
      byline:
        type: string
      publisher:
        type: string
      published_date:
        type: string
        format: date
      pages:
        type: integer
        format: int32
      dewey_decimal:
        type: array
        items:
          type: string
      subtitle:
        type: string
      weight:
        type: string
  Author:
    properties:
      name:
        type: string
  Loan:
    properties:
      user:
        type: integer
        format: int32
      book:
        type: integer
        format: int32
      checked_out_at:
        type: string
        format: dateTime
      expires:
        type: string
        format: dateTime
  ErrorModel:
    required:
      - code
      - message
    properties:
      code:
        type: integer
        format: int32
      message:
        type: string
